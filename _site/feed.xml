<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-27T07:44:02+10:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Zzn021.github.io</title><subtitle>Welcome to my personal website, where you can learn more about me :)</subtitle><author><name>Zeneng Zhao</name></author><entry><title type="html">miniDB</title><link href="http://localhost:4000/project/minidb" rel="alternate" type="text/html" title="miniDB" /><published>2025-04-28T21:50:22+10:00</published><updated>2025-04-28T21:50:22+10:00</updated><id>http://localhost:4000/project/miniDB</id><content type="html" xml:base="http://localhost:4000/project/minidb"><![CDATA[<h3 id="introduction">Introduction</h3>

<p>A simple implementation of a multi-attribute linear-hashed file structure database</p>

<p><a href="https://github.com/Zzn021/miniDB">Github Repo</a></p>

<h1 id="structure">Structure</h1>

<p>A MALH relation R is represented by 3 physical files:</p>

<ul>
  <li><strong>R.info</strong>
  Containing global information
    <ul>
      <li>a count of the number of attributes</li>
      <li>the depth of main data file (d for linear hashing)</li>
      <li>the page index of the split pointer (sp for linear hashing)</li>
      <li>a count of the number of main data page</li>
      <li>the total number of tuples (in both data and overflow page)</li>
      <li>the choice vector (cv for multi-attribute hashing)</li>
    </ul>
  </li>
  <li><strong>R.data</strong>
  Containing data pages
    <ul>
      <li>offset of start of free space</li>
      <li>overflow page index (or NO_PAGE if none)</li>
      <li>a count of the number of tuples in that page</li>
      <li>the tuples (as comma-separated C strings)</li>
    </ul>
  </li>
  <li><strong>R.ovflow</strong>
  Containing overflow pages, which have the same structure as data pages</li>
</ul>

<p>When a MALH relation is first created, it is set to contain a \(2^n\) pages, with depth \(d=n\) and split pointers \(sp=0\). The overflow is initially empty.</p>

<p><img src="/assets/image/projects/minidb/initial_db.png" alt="alt text" /></p>

<p>After 294 tuples have been inserted, the file becomes (depending on field value distributions, tuple sizes, etc):</p>

<p><img src="/assets/image/projects/minidb/second_db.png" alt="alt text" /></p>

<p>Example of a page split:</p>

<p><img src="/assets/image/projects/minidb/after_split.png" alt="alt text" /></p>

<p>Pages in MALH files have the following structure: a header with three unsigned integers, strings for all of the tuple data, free space containing no tuple data.</p>

<p><img src="/assets/image/projects/minidb/malh_structure.png" alt="alt text" /></p>

<h1 id="commands">Commands</h1>

<h4 id="create">Create</h4>

<p>Creates MALH (multi-attribute linear-hashed) files by accepting 4 command line arguments:</p>
<ul>
  <li>the name of the relation</li>
  <li>the number of attributes</li>
  <li>the initial number of data pages (rounded up to nearest 2n)</li>
  <li>the multi-attribute hashing choice vector</li>
</ul>

<p>Example:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./create R 4 6 <span class="s2">"0,0:0,1:1,0:1,1:2,0:3,0"</span>
</code></pre></div></div>
<p>makes a table called abc with 4 attributes and 8 inital data pages (6 will be rounded up to the nearest 2n)</p>

<p>The choice vector (4th argument):</p>
<ul>
  <li>bit 0 from attribute 0 produces bit 0 of the MA hash value</li>
  <li>bit 1 from attribute 0 produces bit 1 of the MA hash value</li>
  <li>bit 0 from attribute 1 produces bit 2 of the MA hash value</li>
  <li>bit 1 from attribute 1 produces bit 3 of the MA hash value</li>
  <li>bit 0 from attribute 2 produces bit 4 of the MA hash value</li>
  <li>bit 0 from attribute 3 produces bit 5 of the MA hash value</li>
</ul>

<h4 id="insert">Insert</h4>

<p>Reads tuples, one per line, from std input and inserts them into the relation.</p>

<p>The bucket where the tuple is stored is determined by the appropriate number of bits of the combined hash value. If the relation has \(2^d\) data pages, then \(d\) bits are used. If the specified data page is full, then the tuple is inserted into an overflow page of that data page.</p>

<p>Example:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"100,xyz,abc"</span> | ./insert R
<span class="c"># prints the hash value for the tuple</span>
</code></pre></div></div>

<h4 id="query">Query</h4>

<p>Run selection and projection queries over a given relation. It supports wildcard and pattern matching, finds all tuples in either the data pages or overflow pages that match the query, as well as flexible attribute projection without <strong>distinct</strong></p>

<p>Example:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./query <span class="o">[</span><span class="nt">-v</span><span class="o">]</span> <span class="s1">'a1,a2,...'</span> from RelName where <span class="s1">'v1,v2,...'</span>
</code></pre></div></div>
<ul>
  <li><strong>‘a1,a2,…’ (or ‘*’)</strong>: a sequence of 1-based attribute indexes used for projection, can be ‘*’ to indicate all attributes. The minimal ‘a’ value is ‘0’</li>
  <li><strong>‘v1,v2,…‘</strong>: a sequence of attribute values used for selection</li>
</ul>

<p>Each $v_i$ in the selection tuple can be:</p>
<ul>
  <li><strong>Literal value</strong>: A specific value that must match exactly in the corresponding attribute position. (e.g., ‘xyz’ matches ‘xyz’, ‘64’ matches ‘64’)</li>
  <li><strong>Single question mark ‘?’</strong>: Matches any literal value in the corresponding attribute position. (e.g., ‘?’ matches ‘xyz’, ‘?’ matches ‘64’)</li>
  <li><strong>Pattern string containing ‘%’</strong>: A string that includes one or more’%’, where each ‘%’ matches zero or more characters.</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./query <span class="s1">'*'</span> from R where <span class="s1">'?,?,?'</span>
<span class="c"># matches any tuple in R</span>

<span class="nv">$ </span>./query <span class="s1">'3, 1'</span> from R where <span class="s1">'10,?,?'</span>
<span class="c"># projects attribute 1 and 3 in order from tuples where attribute 0 is 10</span>

<span class="nv">$ </span>./query <span class="s1">'*'</span> from R where <span class="s1">'?,%xz%,?'</span>
<span class="c"># matches any tuple where attribute 1 contains 'xz'</span>
</code></pre></div></div>

<h4 id="status">Status</h4>

<p>Check the status of the files for table R with stats command:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./stats R
<span class="c"># prints out the stats of R</span>
</code></pre></div></div>

<h4 id="dump">dump</h4>

<p>Show tuples, bucket-by-bucket</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./dump <span class="o">[</span>RelName]
</code></pre></div></div>
<h4 id="gendata">gendata</h4>

<p>Use <code class="language-plaintext highlighter-rouge">gendata</code> to generate large numbers of tuples, and insert them as:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./gendata 800 3 100 | ./insert R
</code></pre></div></div>

<p>Insert 800 tuples into the table, with ID values starting at 100.</p>

<h4 id="clean">clean</h4>

<p>Remove <code class="language-plaintext highlighter-rouge">Rel.data</code> <code class="language-plaintext highlighter-rouge">Rel.info</code> <code class="language-plaintext highlighter-rouge">Rel.ovflow</code>. If no argument provided, remove every existing relation.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./clean <span class="o">[</span>RelName]
</code></pre></div></div>

<script type="text/javascript" async="" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
</script>]]></content><author><name>Zeneng Zhao</name></author><category term="project" /><category term="Database" /><category term="hashing" /><category term="SQL" /><category term="C" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Rust References &amp;amp; Borrowing</title><link href="http://localhost:4000/blog/reference-brrowing" rel="alternate" type="text/html" title="Rust References &amp;amp; Borrowing" /><published>2024-09-21T21:50:22+10:00</published><updated>2024-09-21T21:50:22+10:00</updated><id>http://localhost:4000/blog/rust-referneces-borrowing</id><content type="html" xml:base="http://localhost:4000/blog/reference-brrowing"><![CDATA[<h3 id="ownership">Ownership</h3>

<ul>
  <li>One owner per value.</li>
  <li>When the owner goes out of scope, the value is freed.</li>
  <li>Moving a value hands the keys to a new owner.</li>
</ul>

<p>Borrowing lets multiple parts of your program <em>read</em> (or <em>temporarily edit</em>) a value
without transferring ownership.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"rust"</span><span class="p">);</span>       <span class="c1">// s owns the heap data</span>
    <span class="k">let</span> <span class="n">len</span> <span class="o">=</span> <span class="nf">calculate_length</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>     <span class="c1">// borrow immutably</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"'{s}' is {len} bytes long"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">calculate_length</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">String</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">usize</span> <span class="p">{</span>
    <span class="n">text</span><span class="nf">.len</span><span class="p">()</span>                          <span class="c1">// read-only access</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="immutable-references-t">Immutable References (<code class="language-plaintext highlighter-rouge">&amp;T</code>)</h3>

<p>Analogy: Passing a photocopy of a library book. Everyone can read, nobody can scribble.</p>

<ul>
  <li>we can create any number of <code class="language-plaintext highlighter-rouge">&amp;T</code> references simultaneously.</li>
  <li>The original owner maintains full control and is still usable.</li>
</ul>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"rust"</span><span class="p">);</span>

    <span class="k">let</span> <span class="n">ref1</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">ref2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{ref1} - {ref2}"</span><span class="p">);</span>        <span class="c1">// both fine</span>
</code></pre></div></div>

<h3 id="mutable-references-mut-t">Mutable References (<code class="language-plaintext highlighter-rouge">&amp;mut T</code>)</h3>

<p>with <code class="language-plaintext highlighter-rouge">mut</code> we can modify the borrowed variable.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">let</span> <span class="k">mut</span> <span class="n">s</span> <span class="o">=</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"mutable"</span><span class="p">);</span>

    <span class="nf">change</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">s</span><span class="p">);</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{s}"</span><span class="p">);</span>                    <span class="c1">// prints "mutable string"</span>

    <span class="k">fn</span> <span class="nf">change</span><span class="p">(</span><span class="n">task</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">task</span><span class="nf">.push_str</span><span class="p">(</span><span class="s">" string"</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>If we have a mutable reference to a value, we can have no other references to that value.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">let</span> <span class="k">mut</span> <span class="n">s</span> <span class="o">=</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"hello"</span><span class="p">);</span>

    <span class="k">let</span> <span class="n">r1</span> <span class="o">=</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">s</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">r2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">s</span><span class="p">;</span>

    <span class="nd">println!</span><span class="p">(</span><span class="s">"{}, {}"</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="n">r2</span><span class="p">);</span>         <span class="c1">// This fails</span>
</code></pre></div></div>

<h3 id="the-rules-of-references">The Rules of References</h3>
<ul>
  <li>At any given time, you can have either one mutable reference or any number of immutable references.</li>
  <li>References must always be valid.</li>
</ul>]]></content><author><name>Zeneng Zhao</name></author><category term="blog" /><category term="Rust" /><category term="UNSW" /><category term="comp6991" /><summary type="html"><![CDATA[Ownership]]></summary></entry><entry><title type="html">Welcome to My Github.io Page!</title><link href="http://localhost:4000/greeting" rel="alternate" type="text/html" title="Welcome to My Github.io Page!" /><published>2024-01-04T22:50:22+11:00</published><updated>2024-01-04T22:50:22+11:00</updated><id>http://localhost:4000/welcome-to-my-githubio-page</id><content type="html" xml:base="http://localhost:4000/greeting"><![CDATA[<p>Hi! I’m Zeneng, also known as Harry. I’m a software engineer and a graduate of UNSW. Welcome to my GitHub Pages site! Here, you’ll find posts on software engineering, uni life, and other topics I find interesting.</p>

<p>If you’re into photography, feel free to check out my work on <a href="https://www.instagram.com/zenengz_0214/">Instagram</a>. You can also reach out to me anytime via <a href="https://www.linkedin.com/in/zeneng-zhao-5129a3223">Linkedin</a> or <a href="mailto:harry020102@gmail.com">email</a> — I’d love to connect!</p>]]></content><author><name>Zeneng Zhao</name></author><category term="blog" /><summary type="html"><![CDATA[Hi! I’m Zeneng, also known as Harry. I’m a software engineer and a graduate of UNSW. Welcome to my GitHub Pages site! Here, you’ll find posts on software engineering, uni life, and other topics I find interesting.]]></summary></entry><entry><title type="html">E-Invoicing Application</title><link href="http://localhost:4000/project/e-invoicing" rel="alternate" type="text/html" title="E-Invoicing Application" /><published>2023-03-13T22:50:22+11:00</published><updated>2023-03-13T22:50:22+11:00</updated><id>http://localhost:4000/project/e-invoice</id><content type="html" xml:base="http://localhost:4000/project/e-invoicing"><![CDATA[<h3 id="introduction">Introduction</h3>

<p>This was my first UNSW software engineering work shop project, a SaaS e-invoicing app, includes features such as invoice creation, validation, rendering and sending.The project is deployed on AWS, it uses UBL-XML messaging over the PEPPOL network and aimed at meeting SME requirements in a standards-compliant way.</p>

<dl>
  <dt>E-Invoicing ?</dt>
  <dd>Australia is shifting from paper and emailed PDFs to structured, machine-readable invoices that move directly between accounting systems. NSW accelerated the change by mandating that all state agencies accept e-invoices for goods and services up to AUD 1 million from 2022. The switch, part of the broader Industry 4.0 push, delivers faster payments, fewer errors, and tighter fraud controls.</dd>
</dl>

<h3 id="team">Team</h3>

<p>Our four-person team adopted clear roles: Team Leader, Product Owner (myself), and Delivery Manager. As Product Owner, I shaped the product vision, prioritised the backlog, and kept the team focused on the highest-value features. We ran the project with an Agile cadence: weekly sprint meetings plus asynchronous check-ins, tracking work in Jira and storing documentation in Confluence.</p>

<h3 id="requirements-engineering">Requirements Engineering</h3>

<p>Before coding began, we carried out a full requirements-engineering phase: reviewing the A-NZ PEPPOL interoperability rules, mapping user stories with clear acceptance criteria, and documenting both functional and non-functional requirements.</p>

<p>We studied into the AU/NZ UBL implementation guides and PEPPOL specifications (<a href="https://github.com/A-NZ-PEPPOL/A-NZ-PEPPOL-BIS-3.0">PEPPOL specifiations</a>), turning requirements into concrete backlog items from day one.</p>

<h3 id="application-architecture">Application Architecture</h3>

<ul>
  <li>
    <h4 id="deployment-layer">Deployment Layer</h4>

    <p>The deployment layer is responsible for deploying the application to a cloud provider. The application is deployed on Amazon’s Web Service (AWS) Elastic Beanstalk. It provides an environment that automatically handles the deployment, scaling, and load balancing of the application. It is a scalable, reliable, and cost-effective solution for deploying web applications.</p>
  </li>
  <li>
    <h4 id="interface-layer">Interface Layer</h4>

    <p>The interface layer is responsible for providing a user-friendly interface for users to interact with the application. The application uses a web-based user interface through HTML, CSS, and Javascript. The frontend framework used React, which provides reusable components and robust state management, connecting to the backend via RESTful APIs. The frontend is deployed on AWS Amplify.</p>
  </li>
  <li>
    <h4 id="service-layer">Service Layer</h4>

    <p>The service layer is responsible for providing the backend functionality of the application. We create a RESTful API using Flask, which is a lightweight and efficient Python web framework that provides necessary tools. The API will provide endpoints and routes for creating an invoice, here is a example of our creation API on <a href="https://app.swaggerhub.com/apis/raymond.guo122/InvoiceCreation/1.0.0#/default/post_invoice_creation">Swagger</a></p>
  </li>
</ul>

<h3 id="system-modelling">System Modelling</h3>

<p><img src="/assets/image/projects/e-invoice/system-modelling.png" alt="alt text" />
We modelled the application with UML sequence diagrams that trace the complete user journey, from sign-up and authentication through file upload, JSON/XML-to-UBL conversion, validation, and download. The diagram spans the user interface, user database, and two micro-service APIs. Mapping each call and <strong><em>break</em></strong> branch upfront helped clarify service boundaries, data transformations, and error handling, giving the team a shared blueprint before any code was written.</p>

<h3 id="develop">Develop</h3>

<h4 id="backend"><strong>Backend</strong></h4>

<p>The hardest challenge was the invoice-creation engine: we had to parse four input formats (<em>xml, csv, xls, json</em>) using different libraries, normalise them into one consistent XML tree, and then map that tree onto the PEPPOL-compliant UBL schema.</p>

<p>To guarantee UBL compliance, each raw input is first transformed into a single canonical JSON representation. From that JSON we generate a fresh XML document that exactly matches the PEPPOL UBL schema. Thus, we used thirdparty library for each format to help us for the normalisation.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">csv</span>
<span class="kn">import</span> <span class="n">openpyxl</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">xmltodict</span>
</code></pre></div></div>

<p>CSV to json example:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">csv_to_json</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">csv_file</span><span class="p">:</span>
        <span class="n">csv_reader</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="nc">DictReader</span><span class="p">(</span><span class="n">csv_file</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">csv_reader</span><span class="p">:</span>
            <span class="n">record</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">row</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
                <span class="n">parts</span> <span class="o">=</span> <span class="n">key</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">)</span>
                <span class="n">current_dict</span> <span class="o">=</span> <span class="n">record</span>
                <span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">parts</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                    <span class="n">current_dict</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">part</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="n">current_dict</span> <span class="o">=</span> <span class="n">current_dict</span><span class="p">[</span><span class="n">part</span><span class="p">]</span>
                <span class="n">current_dict</span><span class="p">[</span><span class="n">parts</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
            <span class="n">data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">record</span><span class="p">)</span>

    <span class="nf">write_file</span><span class="p">(</span><span class="n">CONVERT_FILE</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
</code></pre></div></div>

<h4 id="frontend"><strong>Frontend</strong></h4>

<p>The UI is a React single-page application styled with Bootstrap 5. Bootstrap’s grid and utility classes give us responsive layouts with minimal custom CSS, while React components handle data exchange with the backend through REST calls and display consistent loading, error, and success states.</p>

<p>We enhanced the interface with an AI assistant: the React client calls the ChatGPT API so users can generate a UBL-compliant invoice skeleton from plain-language prompts and request on-the-fly edits to their XML before submission.</p>

<p>We supplied the AI with a fixed system prompt that spells out the UBL schema, and formatting rules, so every response either produces a valid invoice skeleton or returns a well-formed XML patch the user can merge directly.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">const</span> <span class="nx">systemMessage</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">role</span><span class="p">:</span> <span class="dl">"</span><span class="s2">system</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">content</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Only help the user to create the UBL XML, you should by default create invoice unless the client wants you to create other.</span><span class="se">\</span><span class="s2">
                    When generating UBL XML put ``` around the code, we will use ``` as sperator and turn the string inside ``` to a file for rendering</span><span class="se">\</span><span class="s2">
                    Make sure the UBL type is invoice </span><span class="se">\</span><span class="s2">
                    it should follow this format: </span><span class="se">\</span><span class="s2">
                    &lt;?xml version=</span><span class="se">\"</span><span class="s2">1.0</span><span class="se">\"</span><span class="s2"> encoding=</span><span class="se">\"</span><span class="s2">UTF-8</span><span class="se">\"</span><span class="s2">?&gt; </span><span class="se">\</span><span class="s2">
                    &lt;Invoice xmlns:cac=</span><span class="se">\"</span><span class="s2">urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2</span><span class="se">\"</span><span class="s2"> xmlns:cbc=</span><span class="se">\"</span><span class="s2">urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2</span><span class="se">\"</span><span class="s2"> xmlns=</span><span class="se">\"</span><span class="s2">urn:oasis:names:specification:ubl:schema:xsd:Invoice-2</span><span class="se">\"</span><span class="s2">&gt; </span><span class="se">\</span><span class="s2">
                    &lt;/Invoice&gt; </span><span class="se">\</span><span class="s2">
                    </span><span class="dl">"</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>Call the OpenAI API for completions.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://api.openai.com/v1/chat/completions</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
            <span class="na">method</span><span class="p">:</span> <span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">,</span>
            <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
                <span class="dl">"</span><span class="s2">Authorization</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Bearer </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">API_KEY</span><span class="p">,</span>
                <span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span>
            <span class="p">},</span>
            <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">(</span><span class="nx">requestBody</span><span class="p">)</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">message</span><span class="p">.</span><span class="nx">content</span><span class="p">)</span>
            <span class="nf">setMessages</span><span class="p">(</span>
                <span class="p">[...</span><span class="nx">chatMessages</span><span class="p">,</span> <span class="p">{</span>
                    <span class="na">message</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">message</span><span class="p">.</span><span class="nx">content</span><span class="p">,</span>
                    <span class="na">sender</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ChatGPT</span><span class="dl">"</span>
                <span class="p">}]</span>
            <span class="p">);</span>
            <span class="nf">getXML</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">message</span><span class="p">.</span><span class="nx">content</span><span class="p">);</span>
            <span class="nf">setTyping</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
        <span class="p">})</span>
    <span class="p">}</span>
</code></pre></div></div>

<h3 id="deployment">Deployment</h3>

<table>
  <thead>
    <tr>
      <th>Layer</th>
      <th>Platform</th>
      <th>Duty</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Backend</td>
      <td>AWS Elastic Beanstalk</td>
      <td>Flask REST APIs, including authentication and token management</td>
    </tr>
    <tr>
      <td>Frontend</td>
      <td>AWS Amplify</td>
      <td>React single-page app</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Zeneng Zhao</name></author><category term="project" /><category term="AWS" /><category term="SaaS" /><category term="Python" /><category term="React" /><category term="GPT" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Wild Life</title><link href="http://localhost:4000/photography/wild-life" rel="alternate" type="text/html" title="Wild Life" /><published>2000-01-01T00:00:00+11:00</published><updated>2000-01-01T00:00:00+11:00</updated><id>http://localhost:4000/photography/wild-life</id><content type="html" xml:base="http://localhost:4000/photography/wild-life"><![CDATA[<div class="gallery">
    <img src="/assets/image/photos/wild-life/DSCF6873-Enhanced-NR.jpg" class="lightbox-trigger" alt="" />
    <img src="/assets/image/photos/wild-life/D03CDA30-9261-4988-8AEB-751621294F73-Enhanced-NR.jpg" class="lightbox-trigger" alt="" />
    <img src="/assets/image/photos/wild-life/DSCF7044-Enhanced-NR.jpg" class="lightbox-trigger" alt="" />
</div>]]></content><author><name>Zeneng Zhao</name></author><category term="photography" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Wings of Steel</title><link href="http://localhost:4000/photography/wings-of-steel" rel="alternate" type="text/html" title="Wings of Steel" /><published>2000-01-01T00:00:00+11:00</published><updated>2000-01-01T00:00:00+11:00</updated><id>http://localhost:4000/photography/wings-of-steel</id><content type="html" xml:base="http://localhost:4000/photography/wings-of-steel"><![CDATA[<div class="gallery">
    <img src="/assets/image/photos/aircraft/DSCF6138.jpg" class="lightbox-trigger" alt="" />
    <img src="/assets/image/photos/aircraft/DSCF6176.jpg" class="lightbox-trigger" alt="" />
</div>]]></content><author><name>Zeneng Zhao</name></author><category term="photography" /><summary type="html"><![CDATA[]]></summary></entry></feed>