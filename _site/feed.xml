<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-06T21:09:07+10:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Zzn021.github.io</title><subtitle>Welcome to my personal website, where you can learn more about me :)</subtitle><author><name>Zeneng Zhao</name></author><entry><title type="html">Rust References &amp;amp; Borrowing</title><link href="http://localhost:4000/blog/2024/09/21/rust-referneces-borrowing.html" rel="alternate" type="text/html" title="Rust References &amp;amp; Borrowing" /><published>2024-09-21T21:50:22+10:00</published><updated>2024-09-21T21:50:22+10:00</updated><id>http://localhost:4000/blog/2024/09/21/rust-referneces-borrowing</id><content type="html" xml:base="http://localhost:4000/blog/2024/09/21/rust-referneces-borrowing.html"><![CDATA[<h3 id="ownership">Ownership</h3>

<ul>
  <li>One owner per value.</li>
  <li>When the owner goes out of scope, the value is freed.</li>
  <li>Moving a value hands the keys to a new owner.</li>
</ul>

<p>Borrowing lets multiple parts of your program <em>read</em> (or <em>temporarily edit</em>) a value
without transferring ownership.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"rust"</span><span class="p">);</span>       <span class="c1">// s owns the heap data</span>
    <span class="k">let</span> <span class="n">len</span> <span class="o">=</span> <span class="nf">calculate_length</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>     <span class="c1">// borrow immutably</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"'{s}' is {len} bytes long"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">calculate_length</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">String</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">usize</span> <span class="p">{</span>
    <span class="n">text</span><span class="nf">.len</span><span class="p">()</span>                          <span class="c1">// read-only access</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="immutable-references-t">Immutable References (<code class="language-plaintext highlighter-rouge">&amp;T</code>)</h3>

<p>Analogy: Passing a photocopy of a library book. Everyone can read, nobody can scribble.</p>

<ul>
  <li>we can create any number of <code class="language-plaintext highlighter-rouge">&amp;T</code> references simultaneously.</li>
  <li>The original owner maintains full control and is still usable.</li>
</ul>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"rust"</span><span class="p">);</span>

    <span class="k">let</span> <span class="n">ref1</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">ref2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{ref1} - {ref2}"</span><span class="p">);</span>        <span class="c1">// both fine</span>
</code></pre></div></div>

<h3 id="mutable-references-mut-t">Mutable References (<code class="language-plaintext highlighter-rouge">&amp;mut T</code>)</h3>

<p>with <code class="language-plaintext highlighter-rouge">mut</code> we can modify the borrowed variable.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">let</span> <span class="k">mut</span> <span class="n">s</span> <span class="o">=</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"mutable"</span><span class="p">);</span>

    <span class="nf">change</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">s</span><span class="p">);</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"{s}"</span><span class="p">);</span>                    <span class="c1">// prints "mutable string"</span>

    <span class="k">fn</span> <span class="nf">change</span><span class="p">(</span><span class="n">task</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">task</span><span class="nf">.push_str</span><span class="p">(</span><span class="s">" string"</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>If we have a mutable reference to a value, we can have no other references to that value.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">let</span> <span class="k">mut</span> <span class="n">s</span> <span class="o">=</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"hello"</span><span class="p">);</span>

    <span class="k">let</span> <span class="n">r1</span> <span class="o">=</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">s</span><span class="p">;</span>
    <span class="k">let</span> <span class="n">r2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">s</span><span class="p">;</span>

    <span class="nd">println!</span><span class="p">(</span><span class="s">"{}, {}"</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="n">r2</span><span class="p">);</span>         <span class="c1">// This fails</span>
</code></pre></div></div>

<h3 id="the-rules-of-references">The Rules of References</h3>
<ul>
  <li>At any given time, you can have either one mutable reference or any number of immutable references.</li>
  <li>References must always be valid.</li>
</ul>]]></content><author><name>Zeneng Zhao</name></author><category term="blog" /><category term="Rust" /><category term="UNSW" /><category term="comp6991" /><summary type="html"><![CDATA[Ownership]]></summary></entry><entry><title type="html">Test Project Post</title><link href="http://localhost:4000/project/2024/07/23/test-project.html" rel="alternate" type="text/html" title="Test Project Post" /><published>2024-07-23T21:50:22+10:00</published><updated>2024-07-23T21:50:22+10:00</updated><id>http://localhost:4000/project/2024/07/23/test-project</id><content type="html" xml:base="http://localhost:4000/project/2024/07/23/test-project.html"><![CDATA[<p>Todo</p>]]></content><author><name>Zeneng Zhao</name></author><category term="project" /><category term="AWS" /><summary type="html"><![CDATA[Todo]]></summary></entry><entry><title type="html">Welcome to My Github.io Page!</title><link href="http://localhost:4000/greeting" rel="alternate" type="text/html" title="Welcome to My Github.io Page!" /><published>2024-01-04T22:50:22+11:00</published><updated>2024-01-04T22:50:22+11:00</updated><id>http://localhost:4000/welcome-to-my-githubio-page</id><content type="html" xml:base="http://localhost:4000/greeting"><![CDATA[<p>Hi! I’m Zeneng, also known as Harry. I’m a software engineer and a graduate of UNSW. Welcome to my GitHub Pages site! Here, you’ll find posts on software engineering, uni life, and other topics I find interesting.</p>

<p>If you’re into photography, feel free to check out my work on <a href="https://www.instagram.com/zenengz_0214/">Instagram</a>. You can also reach out to me anytime via <a href="https://www.linkedin.com/in/zeneng-zhao-5129a3223">Linkedin</a> or <a href="mailto:harry020102@gmail.com">email</a> — I’d love to connect!</p>]]></content><author><name>Zeneng Zhao</name></author><category term="blog" /><summary type="html"><![CDATA[Hi! I’m Zeneng, also known as Harry. I’m a software engineer and a graduate of UNSW. Welcome to my GitHub Pages site! Here, you’ll find posts on software engineering, uni life, and other topics I find interesting.]]></summary></entry><entry><title type="html">Wild Life</title><link href="http://localhost:4000/photography/wild-life" rel="alternate" type="text/html" title="Wild Life" /><published>2000-01-01T00:00:00+11:00</published><updated>2000-01-01T00:00:00+11:00</updated><id>http://localhost:4000/photography/wild-life</id><content type="html" xml:base="http://localhost:4000/photography/wild-life"><![CDATA[<div class="gallery">
    <img src="/assets/image/photos/wild-life/DSCF6873-Enhanced-NR.jpg" class="lightbox-trigger" alt="" />
    <img src="/assets/image/photos/wild-life/D03CDA30-9261-4988-8AEB-751621294F73-Enhanced-NR.jpg" class="lightbox-trigger" alt="" />
    <img src="/assets/image/photos/wild-life/DSCF7044-Enhanced-NR.jpg" class="lightbox-trigger" alt="" />
</div>]]></content><author><name>Zeneng Zhao</name></author><category term="photography" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Wings of Steel</title><link href="http://localhost:4000/photography/wings-of-steel" rel="alternate" type="text/html" title="Wings of Steel" /><published>2000-01-01T00:00:00+11:00</published><updated>2000-01-01T00:00:00+11:00</updated><id>http://localhost:4000/photography/wings-of-steel</id><content type="html" xml:base="http://localhost:4000/photography/wings-of-steel"><![CDATA[<div class="gallery">
    <img src="/assets/image/photos/aircraft/DSCF6138.jpg" class="lightbox-trigger" alt="" />
    <img src="/assets/image/photos/aircraft/DSCF6176.jpg" class="lightbox-trigger" alt="" />
</div>]]></content><author><name>Zeneng Zhao</name></author><category term="photography" /><summary type="html"><![CDATA[]]></summary></entry></feed>